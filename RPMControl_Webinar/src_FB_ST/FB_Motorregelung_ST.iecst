/* 
 * Funktionsbaustein PT1
 * Zum GlÃ¤tten von Anlogwerten 
 */
FUNCTION_BLOCK MotorControl_PT1_ST
VAR_INPUT
 vir_x  : REAL;						/* Eingang */
 vir_T1 : REAL;					    /* Daempfung */
END_VAR
VAR_OUTPUT
 vor_y: REAL;						/* Ausgang */
END_VAR
VAR
 lr_y_old : REAL;					/* Speichern der alten Ausgangsgroesse  */
END_VAR

 vor_y:=vir_T1*lr_y_old+(1-vir_T1) * vir_x;			/* Berechnung der gedaempften Ausgangsgroesse */
 
 lr_y_old := vor_y;							        /* Zwischenspeichern des aktuellen Ausgangswertes */

END_FUNCTION_BLOCK

/*
 * PIDT1-Algorithmus (AnalogWerte in REAL)
 */
FUNCTION_BLOCK MotorControl_PID_ST

VAR_INPUT
  vir_Inp     : REAL;  // control difference 
  vir_TI      : REAL;  // Integral action time [s] 
  vir_Kv      : REAL;  // derivative action amplification
  vir_T1      : REAL;  // fading time constant [s]     .
  vix_Auto    : BOOL;  // controller on automatic operation       .
  vir_YManual : REAL;  // Manual operation preset value     .
  vir_Lvu     : REAL;  // Upper limiting value of the actuating variable        .
  vir_Lvd     : REAL;  // Lower limiting value of the actuating variable        .
  vir_Kp      : REAL;  // Proportional control factor       .
END_VAR

VAR_OUTPUT
  vox_Lu      : BOOL; // Upper Limit
  vox_Ld      : BOOL; // Lower Limit

  vor_Out     : REAL; // Output Variable

  vor_P       : REAL; // Proportional Part
  vor_I       : REAL; // Integral Part
  vor_D       : REAL; // Derivative Part  
END_VAR

VAR
  lx_CycleFlag  : BOOL;  // Merker fuer nicht ersten Zyklus
  lr_IOld       : REAL;  // Eingangswert des letzten Zyklus(x(t-dt))           
  lt_ENDT       : TIME;  // Timer  

  lr_ENDT    : REAL;     // EndTimer in REAL

  /* 
   * Ermittlung per Systemaufruf in logi.CAD 3
   */ 
  lr_SysTaskCycleTime : REAL; //CycleTime in REAL

END_VAR

VAR
  lr_dtv    : REAL;
  lr_pdt1   : REAL;
  
  lx_corr_i : BOOL := FALSE; 
END_VAR
/* 
 *  Calc Cycle Time  
 */
lr_SysTaskCycleTime := TO_REAL(SysTaskCycleTime());
// lr_dtv := SUB(lr_SysTaskCycleTime,lr_ENDT);

/*  
 * Zeitdifferenz = Taskzeit!
 */
lr_dtv := lr_SysTaskCycleTime;  // In Sec! Bei 50ms = 0.05

// lr_ENDT := TO_REAL(SysTaskCycleTime());
// ENDT := TO_TIME(lr_ENDT);

/*      
 *  P Part
 */
vor_P := vir_Inp * vir_Kp;
/*      
 *  DT1 Part
 */
IF lx_CycleFlag AND vir_T1 > 0.0 THEN
      /* 
       *  D-part calculation
       * dtv comes in sec 
       */
       vor_D := vir_T1 * (vor_D + vir_Kv * vir_Inp-lr_IOld) / (vir_T1 + lr_dtv); 
ELSE
      /* 
       *  With T1 = 0.0 or less then 0.0 no D-Part set
       */
       vor_D := 0.0;
END_IF;
/* 
 *   P-Part plus D-Part
 */
lr_pdt1 := vor_P + vor_D;
/* 
 *  Calc I only in automatic mode
 */
IF vix_Auto THEN
       
       IF lx_CycleFlag AND vir_Kp <> 0.0 AND vir_TI > 0.0 THEN
            /* 
             *  dtv = SystemTaskTime
             */
             vor_I := vor_I + vir_Kp * lr_dtv * (vir_Inp + lr_IOld)/2;

       END_IF;
END_IF;
       
IF vix_Auto THEN
      /* 
       *  PD-Part + I-Part
       */
       vor_Out := lr_pdt1 + vor_I;
ELSE
      /* 
       *  Manual mode
       */
       vor_Out := vir_YManual;
       lx_corr_i := TRUE;
END_IF;

lr_IOld := vir_Inp;

/* 
 * Check Limits
 */ 
IF vor_Out > vir_Lvu THEN
       vor_Out    := vir_Lvu;
       vox_Lu     := TRUE;
       vox_Ld     := FALSE;
       lx_corr_i  := TRUE;
ELSE
       IF vor_Out <= vir_Lvd THEN
             vor_Out    := vir_Lvd;
             vox_Lu     := FALSE;
             vox_Ld     := TRUE;
             lx_corr_i  := TRUE;
       ELSE
             vox_Lu := FALSE;
             vox_Ld := FALSE;
       END_IF;
END_IF;

/* 
 *   Adapt I-Part if neccessary
 */ 
 IF lx_corr_i THEN
      vor_I := vor_Out - lr_pdt1;
 END_IF;

/* 
 *  If manual mode the Out := YMan
 */
 IF vix_Auto = FALSE THEN
      vor_Out := vir_YManual;
 END_IF;

 lx_CycleFlag := TRUE;
 
END_FUNCTION_BLOCK

/*
 * Skalieren einses Analogwertes
 */
FUNCTION_BLOCK MotorAnalogScale_ST
  /*
   * MaxInVal: MaxVal from AnalogInput (digits)
   * MinInVal: MinVal from AnalogInput (digits)
   * MaxPhysVal: MaxPhysVal from AnalogInput (PhysUnits)
   * MinPhysVal: MinPhysVal from AnalogInput (PhysUnits)
   */
  VAR_INPUT
    vir_In : REAL;
    vir_MaxInVal      : REAL;
    vir_MinInVal      : REAL;
    vir_MaxPhysVal    : REAL;
    vir_MinPhysVal    : REAL;
    vir_OffsetPhysVal : REAL;
  END_VAR

  VAR_OUTPUT
    vox_InValError   : BOOL;
    vor_OutPhysVal   : REAL;
    vox_PhysValError : BOOL;
  END_VAR

  VAR
   /*
    * Local Var
    */ 
    lr_DiffInVal         : REAL;
    lr_DiffInVal_NotZero : BOOL;
    lr_DiffPhysVal       : REAL;
    lr_A                 : REAL;
    lr_A_Mul_X           : REAL;
    lr_A_Mul_X_Plus_B    : REAL;
    lx_InValError        : BOOL;
  END_VAR
  /*
   * Bereichgrenzen ueberwachen
   */
  lr_DiffInVal        :=SUB(vir_MaxInVal,vir_MinInVal);
  lr_DiffInVal_NotZero:=NE(SUB(vir_MaxInVal,vir_MinInVal),0.0);
  
  lr_DiffPhysVal:=SUB(vir_MaxPhysVal,vir_MinPhysVal);
  
  IF lr_DiffInVal_NotZero THEN 
   lr_A:=DIV(EN:=lr_DiffInVal_NotZero,IN1:=lr_DiffPhysVal,IN2:=lr_DiffInVal);
   lx_InValError := FALSE;
  ELSE
   lr_A:= 0;
   lx_InValError := TRUE;
  END_IF;
  
  lr_A_Mul_X:=MUL(vir_In,lr_A);
 /*
  * Output Values for Function Block
  */
  vox_InValError:=OR(GT(vir_In,vir_MaxInVal),LT(vir_In,vir_MinInVal), lx_InValError);
 /*
  * Physical Value Error
  */
  vox_PhysValError:=NOT(lr_DiffInVal_NotZero);
 /*
  * lr_A_Mul_X_Plus_B calculated
  */
  lr_A_Mul_X_Plus_B := ADD(lr_A_Mul_X,vir_OffsetPhysVal);
 /*
  * To Output
  */ 
  vor_OutPhysVal:=lr_A_Mul_X_Plus_B;
  
END_FUNCTION_BLOCK
