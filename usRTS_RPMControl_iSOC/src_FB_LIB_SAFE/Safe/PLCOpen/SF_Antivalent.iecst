USING logicals.web.standard.safe;

NAMESPACE logicals.web.standard.safe
NAMESPACE plcopen

TYPE
	SF_Antivalent_State : UINT(
	/* Discrepancy time elapsed in state 8802. */
	Error_1 := 16#C010,
	/* Discrepancy time elapsed in state 8804. */
	Error_2 := 16#C020,
	/* Discrepancy time elapsed in state 8806. */
	Error_3 := 16#C030,
	/* The function block is not active (initial state). */
	Idle := 16#0000,
	/* An activation has been detected by the FB and the FB is now activated. */
	Init := 16#8801,
	/* The inputs switched to the Active state in antivalent mode. */
	Safety_Output_Enabled := 16#8000,
	/* ChannelNC has been switched to TRUE - waiting for ChannelNO to be switched to FALSE; discrepancy timer started. */
	Wait_for_NO := 16#8802,
	/* ChannelNO has been switched to FALSE - waiting for ChannelNC to be switched to TRUE; discrepancy timer started. */
	Wait_for_NC := 16#8804,
	/* One channel has been switched to inactive; waiting for the second channel to be switched to inactive too. */
	From_Active_Wait := 16#8806
	);
END_TYPE

/*
 * This function block converts two antivalent SAFEBOOL inputs (NO/NC pair) to one SAFEBOOL output with discrepancy time monitoring.
 * This FB should not be used stand-alone since it has no restart interlock.
 * It is required to connect the output to other safety related functionalities.
 */
FUNCTION_BLOCK SF_Antivalent
	{ altName:="SF_Antivalent"; bgColor:="Gold"; width:=380; }
	VAR_INPUT
		/* See Section 5.1.1 General Input Parameters */
		Activate : BOOL := FALSE;
		/* Variable. NC stands for Normally Closed.
		 * Input for NC connection.
		 * FALSE: NC contact open.
		 * TRUE: NC contact closed. */
		S_ChannelNC : SAFEBOOL := SAFEBOOL_Constant#SAFEFALSE;
		/* Variable. NO stands for Normally Open.
		 * Input for NO connection.
		 * FALSE: NO contact open
		 * TRUE: NO contact closed */
		S_ChannelNO : SAFEBOOL := SAFEBOOL_Constant#SAFETRUE;
		/* Constant. Maximum monitoring time for discrepancy status of both inputs. */
		DiscrepancyTime : TIME := T#0ms;
	END_VAR
	VAR_OUTPUT
		/* See Section 5.1.2 General Output Parameters */
		Ready : BOOL := FALSE;
		/* Safety related output
		 * FALSE: Minimum of one input signal "not active" or status change outside of monitoring time.
		 * TRUE: Both inputs signals "active" and status change within monitoring time. */
		S_AntivalentOut : SAFEBOOL := SAFEBOOL_Constant#SAFEFALSE;
		/* See 5.1.2 General Output Parameters */
		SafetyDemand : BOOL := FALSE;
		/* See Section 5.1.2 General Output Parameters */
		Error : BOOL := FALSE;
		/* See Section 5.1.2 General Output Parameters */
		DiagCode : WORD := 16#0000;
	END_VAR
	VAR
		DiscrepancyTimer : TON;
	END_VAR

	IF(NOT Activate) THEN
		DiagCode := TO_WORD(SF_Antivalent_State#Idle);
	ELSE
		CASE TO_UINT(DiagCode) OF
			SF_Antivalent_State#Idle:
				/* IF(Activate) THEN - Active is always true here */
					DiagCode := TO_WORD(SF_Antivalent_State#Init);
			SF_Antivalent_State#Init:
				IF(IS(S_ChannelNC) AND IS(S_ChannelNO)) THEN
					DiagCode := TO_WORD(SF_Antivalent_State#Wait_for_NO);
				ELSIF(IS_NOT(S_ChannelNC) AND IS_NOT(S_ChannelNO)) THEN
					DiagCode := TO_WORD(SF_Antivalent_State#Wait_for_NC);
				ELSIF(IS(S_ChannelNC) AND IS_NOT(S_ChannelNO)) THEN
					DiagCode := TO_WORD(SF_Antivalent_State#Safety_Output_Enabled);
				END_IF;
			SF_Antivalent_State#Wait_for_NO:
				DiscrepancyTimer();
				IF(DiscrepancyTimer.Q) THEN
					DiagCode := TO_WORD(SF_Antivalent_State#Error_1);
				ELSIF(IS_NOT(S_ChannelNC)) THEN
					DiagCode := TO_WORD(SF_Antivalent_State#Init);
				ELSIF(IS_NOT(S_ChannelNO)) THEN
					DiagCode := TO_WORD(SF_Antivalent_State#Safety_Output_Enabled);
				END_IF;
			SF_Antivalent_State#Wait_for_NC:
				DiscrepancyTimer();
				IF(DiscrepancyTimer.Q) THEN
					DiagCode := TO_WORD(SF_Antivalent_State#Error_2);
				ELSIF(IS(S_ChannelNO)) THEN
					DiagCode := TO_WORD(SF_Antivalent_State#Init);
				ELSIF(IS(S_ChannelNC)) THEN
					DiagCode := TO_WORD(SF_Antivalent_State#Safety_Output_Enabled);
				END_IF;
			SF_Antivalent_State#Safety_Output_Enabled:
				IF(IS_NOT(S_ChannelNC) AND IS(S_ChannelNO)) THEN
					DiagCode := TO_WORD(SF_Antivalent_State#Init);
				ELSIF(IS_NOT(S_ChannelNC) OR IS(S_ChannelNO)) THEN
					DiagCode := TO_WORD(SF_Antivalent_State#From_Active_Wait);
				END_IF;
			SF_Antivalent_State#From_Active_Wait:
				DiscrepancyTimer();
				IF(DiscrepancyTimer.Q) THEN
					DiagCode := TO_WORD(SF_Antivalent_State#Error_3);
				ELSIF(IS_NOT(S_ChannelNC) AND IS(S_ChannelNO)) THEN
					DiagCode := TO_WORD(SF_Antivalent_State#Init);
				END_IF;
			SF_Antivalent_State#Error_1,SF_Antivalent_State#Error_2,SF_Antivalent_State#Error_3:
				IF(IS_NOT(S_ChannelNC) AND IS(S_ChannelNO)) THEN
					DiagCode := TO_WORD(SF_Antivalent_State#Init);
				END_IF;
			ELSE
				ENO := FALSE;
		END_CASE;
	END_IF;

	CASE TO_UINT(DiagCode) OF
		SF_Antivalent_State#Idle:
			DiscrepancyTimer(IN := FALSE);
			Ready := FALSE;
			S_AntivalentOut := SAFEBOOL_Constant#SAFEFALSE;
			SafetyDemand := FALSE;
			Error := FALSE;
		SF_Antivalent_State#Init:
			DiscrepancyTimer(IN := FALSE);
			Ready := TRUE;
			S_AntivalentOut := SAFEBOOL_Constant#SAFEFALSE;
			SafetyDemand := TRUE;
			Error := FALSE;
		SF_Antivalent_State#Safety_Output_Enabled:
			DiscrepancyTimer(IN := FALSE);
			Ready := TRUE;
			S_AntivalentOut := SAFEBOOL_Constant#SAFETRUE;
			SafetyDemand := FALSE;
			Error := FALSE;
		SF_Antivalent_State#Wait_for_NO,SF_Antivalent_State#Wait_for_NC,SF_Antivalent_State#From_Active_Wait:
			DiscrepancyTimer(IN := TRUE, PT := DiscrepancyTime);
			Ready := TRUE;
			S_AntivalentOut := SAFEBOOL_Constant#SAFEFALSE;
			SafetyDemand := TRUE;
			Error := FALSE;
		SF_Antivalent_State#Error_1,SF_Antivalent_State#Error_2,SF_Antivalent_State#Error_3:
			DiscrepancyTimer(IN := FALSE);
			Ready := TRUE;
			S_AntivalentOut := SAFEBOOL_Constant#SAFEFALSE;
			SafetyDemand := FALSE;
			Error := TRUE;
		ELSE
			ENO := FALSE;
	END_CASE;

	ENO := ENO AND CheckSAFEBOOL(S_ChannelNC) AND CheckSAFEBOOL(S_ChannelNO);

END_FUNCTION_BLOCK

END_NAMESPACE
END_NAMESPACE
