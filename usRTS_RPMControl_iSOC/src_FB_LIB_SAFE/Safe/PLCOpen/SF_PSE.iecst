USING logicals.web.standard.safe;

NAMESPACE logicals.web.standard.safe
NAMESPACE plcopen

/*
 * This function block is a safety-related function block for monitoring Pressure-Sensitive-Equipment (PSE) like Safety Mats, Bumper etc.
 */
FUNCTION_BLOCK SF_PSE
	{ altName:="SF_PSE"; bgColor:="Gold"; width:=320; }
	VAR_INPUT
		/* See Section 5.1.1 General Input Parameters */
		Activate : BOOL := FALSE;
		/* Safety demand input.
		 * Variable.
		 * FALSE: PSE actuated, demand for safety-related response.
		 * TRUE: PSE not actuated, no demand for safety-related response.
		 * Safety control system must be able to detect a very short interruption of the PSE
		 * (which is specified in EN 1760: minimum 200 ms), when the PSE is used in applications as a safety device.
		 */
		S_PSE_In : SAFEBOOL := SAFEBOOL_Constant#SAFEFALSE;
		/* See Section 5.1.1 General Input Parameters */
		S_StartReset : SAFEBOOL := SAFEBOOL_Constant#SAFEFALSE;
		/* See Section 5.1.1 General Input Parameters */
		S_AutoReset : SAFEBOOL := SAFEBOOL_Constant#SAFEFALSE;
		/* See Section 5.1.1 General Input Parameters */
		Reset : BOOL := FALSE;
	END_VAR
	VAR_OUTPUT
		/* See Section 5.1.2 General Output Parameters */
		Ready : BOOL := FALSE;
		/* Output for the safety-related response.
		 * FALSE: Safety output disabled. Demand for safety-related response (e.g., reset requested or internal errors active).
		 * TRUE: Safety output enabled. No demand for safety-related response.
		 */
		S_PSE_Out : SAFEBOOL := SAFEBOOL_Constant#SAFEFALSE;
		/* Optional. See 5.1.2 General Output Parameters */
		SafetyDemand : BOOL := FALSE;
		/* Optional. See 5.1.2 General Output Parameters */
		ResetRequest : BOOL := FALSE;
		/* See Section 5.1.2 General Output Parameters */
		Error : BOOL := FALSE;
		/* See Section 5.1.2 General Output Parameters */
		DiagCode : WORD := 16#0000;
	END_VAR
	VAR
		GenericSafetyDemand : SFB_GenericSafetyDemand;
	END_VAR

	GenericSafetyDemand(
		Activate := Activate,
		S_SafetyDemandIn := S_PSE_In,
		S_StartReset := S_StartReset,
		S_AutoReset := S_AutoReset,
		Reset := Reset,
		Ready => Ready,
		S_SafetyDemandOut => S_PSE_Out,
		SafetyDemand => SafetyDemand,
		ResetRequest => ResetRequest,
		Error => Error,
		DiagCode => DiagCode,
		ENO => ENO
	);

END_FUNCTION_BLOCK

END_NAMESPACE
END_NAMESPACE

