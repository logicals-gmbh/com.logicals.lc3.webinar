USING logicals.web.standard.safe;

NAMESPACE logicals.web.standard.safe
NAMESPACE plcopen

TYPE
	SF_MutingSeq_State : UINT(
	/* Static Reset condition detected after FB activation. */
	Reset_Error_1 := 16#C001,
	/* Static Reset condition detected in state 8402 */
	Reset_Error_2 := 16#C011,
	/* Error detected in muting sequence in states 8000, 8010, 8020, 8120 or 8110 */
	Error_Muting_Sequence_Base := 16#C004,
	/* MaxMutingTime value out of range */
	Parameter_Error := 16#C010,
	/* Error Timer MaxMuting */
	Error_Timer_MaxMuting := 16#C020,
	/* The function block is not active (initial state). */
	Idle := 16#0000,
	/* Muting not active and no safety demand from AOPD */
	AOPD_Free := 16#8000,
	/* Function block has been activated */
	Init := 16#8401,
	/* Safety demand detected by AOPD, muting not active */
	Safety_Demand_AOPD := 16#8802,
	/* Safety demand or errors have been detected and are now cleared. Operator acknowledgment by Reset required */
	Wait_for_Reset := 16#8402,
	/* Safety function activated */
	Safe := 16#8002,
	/* Muting forward, sequence is in starting phase and no safety demand */
	Muting_Forward_Start := 16#8010,
	/* Muting forward, sequence is active */
	Muting_Forward_Active := 16#8020,
	/* Muting Backward Active */
	Muting_Backward_Active := 16#8120,
	/* Muting Backward Start */
	Muting_Backward_Start := 16#8110);
END_TYPE

/*
 * Muting is the intended suppression of the safety function (e.g., light barriers). In this FB, sequential muting with four
 * muting sensors is specified.
 */
FUNCTION_BLOCK SF_MutingSeq
	{ altName:="SF_MutingSeq"; bgColor:="Gold"; width:=380; }
	VAR_INPUT
		/* See Section 5.1.1 General Input Parameters */
		Activate : BOOL := FALSE;
		/* Variable. OSSD signal from AOPD.
		 * FALSE: Protection field interrupted.
		 * TRUE: Protection field not interrupted. */
		S_AOPD_In : SAFEBOOL := SAFEBOOL_Constant#SAFEFALSE;
		/* Variable. Status of Muting sensor 11.
		 * FALSE: Muting sensor 11 not actuated.
		 * TRUE: Workpiece actuates muting sensor 11.
		 * Depending on the safety requirements it can be necessary to connect a SAFEBOOL. */
		MutingSwitch11 : BOOL := FALSE;
		/* Variable. Status of Muting sensor 12.
		 * FALSE: Muting sensor 12 not actuated.
		 * TRUE: Workpiece actuates muting sensor 12.
		 * Depending on the safety requirements it can be necessary to connect a SAFEBOOL. */
		MutingSwitch12 : BOOL := FALSE;
		/* Variable. Status of Muting sensor 21.
		 * FALSE: Muting sensor 21 not actuated.
		 * TRUE: Workpiece actuates muting sensor 21.
		 * Depending on the safety requirements it can be necessary to connect a SAFEBOOL. */
		MutingSwitch21 : BOOL := FALSE;
		/* Variable. Status of Muting sensor 22.
		 * FALSE: Muting sensor 22 not actuated.
		 * TRUE: Workpiece actuates muting sensor 22.
		 * Depending on the safety requirements it can be necessary to connect a SAFEBOOL. */
		MutingSwitch22 : BOOL := FALSE;
		/* Constant 0 .. 120 min (application specific).
		 * Maximum time for complete muting sequence, timer
		 * started when second muting sensor is actuated.
		 * If needed this can be combined with SF_Override. */
		MaxMutingTime : TIME := T#0s;
		/* Variable or constant. Command by the control system that enables the start of the
		 * muting function when needed by the machine cycle. After the start of the muting
		 * function, this signal can be switched off.
		 * FALSE: Muting not enabled
		 * TRUE: Start of Muting function enabled */
		MutingEnable : BOOL := FALSE;
		/* See Section 5.1.1 General Input Parameters */
		S_StartReset : SAFEBOOL := SAFEBOOL_Constant#SAFEFALSE;
		/* See Section 5.1.1 General Input Parameters */
		Reset : BOOL := FALSE;
	END_VAR
	VAR_OUTPUT
		/* See Section 5.1.2 General Output Parameters */
		Ready : BOOL := FALSE;
		/* Safety related output, indicates status of the muted guard.
		 * FALSE: AOPD protection field interrupted and muting not active.
		 * TRUE: AOPD protection field not interrupted or muting active. */
		S_AOPD_OUT : SAFEBOOL := SAFEBOOL_Constant#SAFEFALSE;
		/* Indicates status of Muting process.
		 * FALSE: Muting not active.
		 * TRUE: Muting active. */
		S_MutingActive : SAFEBOOL := SAFEBOOL_Constant#SAFEFALSE;
		/* Optional. See Section 5.1.2 General Output Parameters */
		SafetyDemand : BOOL := FALSE;
		/* Optional. See Section 5.1.2 General Output Parameters */
		ResetRequest : BOOL := FALSE;
		/* See Section 5.1.2 General Output Parameters */
		Error : BOOL := FALSE;
		/* See Section 5.1.2 General Output Parameters */
		DiagCode : WORD := 16#0000;
	END_VAR
	VAR
		/* ControlCode is used for state tracking */
		MutingTimer : TON;
		ControlCode : UINT := 16#0000;
		/* MutingSwitchState is used to produce the correct DiagCode for errors in the muting sequence in multiple states */
		MutingSwitchState : UINT := 16#0000;
		R_Trig_Reset : R_TRIG;
		R_Trig_S11 : R_TRIG;
		R_Trig_S12 : R_TRIG;
		R_Trig_S21 : R_TRIG;
		R_Trig_S22 : R_TRIG;
		F_Trig_S11 : F_TRIG;
		F_Trig_S12 : F_TRIG;
		F_Trig_S21 : F_TRIG;
		F_Trig_S22 : F_TRIG;
	END_VAR

	R_Trig_Reset(Reset);
	R_Trig_S11(MutingSwitch11);
	R_Trig_S12(MutingSwitch12);
	R_Trig_S21(MutingSwitch21);
	R_Trig_S22(MutingSwitch22);
	F_Trig_S11(MutingSwitch11);
	F_Trig_S12(MutingSwitch12);
	F_Trig_S21(MutingSwitch21);
	F_Trig_S22(MutingSwitch22);

	IF(NOT Activate) THEN
		ControlCode := SF_MutingSeq_State#Idle;
		DiagCode := TO_WORD(ControlCode);
	ELSE
		CASE TO_UINT(ControlCode) OF
			SF_MutingSeq_State#Idle:
				ControlCode := SF_MutingSeq_State#Init;
				DiagCode := TO_WORD(ControlCode);
			SF_MutingSeq_State#Init:
				IF(Reset AND NOT R_Trig_Reset.Q) THEN
					ControlCode := SF_MutingSeq_State#Reset_Error_1;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MaxMutingTime < T#0M OR MaxMutingTime > T#120M) THEN
					ControlCode := SF_MutingSeq_State#Parameter_Error;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(R_Trig_Reset.Q OR IS(S_StartReset)) THEN
					ControlCode := SF_MutingSeq_State#Safe;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingSeq_State#Reset_Error_1:
				IF(NOT Reset) THEN
					ControlCode := SF_MutingSeq_State#Init;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingSeq_State#Safe:
				IF(IS_NOT(S_AOPD_In)) THEN
					ControlCode := SF_MutingSeq_State#Safety_Demand_AOPD;
					DiagCode := TO_WORD(ControlCode);
				ELSE
					ControlCode := SF_MutingSeq_State#AOPD_Free;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingSeq_State#Safety_Demand_AOPD:
				IF(IS(S_AOPD_In)) THEN
					ControlCode := SF_MutingSeq_State#Wait_for_Reset;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingSeq_State#Wait_for_Reset:
				IF(Reset AND NOT R_Trig_Reset.Q) THEN
					ControlCode := SF_MutingSeq_State#Reset_Error_2;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(R_Trig_Reset.Q) THEN
					ControlCode := SF_MutingSeq_State#Safe;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingSeq_State#Reset_Error_2:
				IF(NOT Reset) THEN
					ControlCode := SF_MutingSeq_State#Wait_for_Reset;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingSeq_State#Error_Muting_Sequence_Base:
				IF(NOT (MutingSwitch11 OR MutingSwitch12 OR MutingSwitch21 OR MutingSwitch22)) THEN
					ControlCode := SF_MutingSeq_State#Wait_for_Reset;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingSeq_State#Error_Timer_MaxMuting:
				IF(NOT (MutingSwitch11 OR MutingSwitch12 OR MutingSwitch21 OR MutingSwitch22)) THEN
					ControlCode := SF_MutingSeq_State#Wait_for_Reset;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingSeq_State#AOPD_Free:
				IF((NOT MutingEnable AND R_Trig_S11.Q) OR (NOT MutingEnable AND R_Trig_S22.Q)) THEN
					/* Error muting sequence */
					ControlCode := SF_MutingSeq_State#Error_Muting_Sequence_Base;
					DiagCode := TO_WORD(SF_MutingSeq_State#Error_Muting_Sequence_Base + 16#0F00 + MutingSeqGetErrorStateOfMutingSensors(MutingSwitch11, MutingSwitch12, MutingSwitch21, MutingSwitch22));
				ELSIF((MutingSwitch12 OR MutingSwitch21) OR (MutingSwitch11 AND MutingSwitch22)) THEN
					/* Error muting sequence */
					ControlCode := SF_MutingSeq_State#Error_Muting_Sequence_Base;
					DiagCode := TO_WORD(SF_MutingSeq_State#Error_Muting_Sequence_Base + MutingSeqGetErrorStateOfMutingSensors(MutingSwitch11, MutingSwitch12, MutingSwitch21, MutingSwitch22));
				ELSIF(IS_NOT(S_AOPD_In)) THEN
					ControlCode := SF_MutingSeq_State#Safety_Demand_AOPD;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MutingEnable AND (R_Trig_S11.Q AND NOT MutingSwitch12 AND NOT MutingSwitch21 AND NOT MutingSwitch22)) THEN
					ControlCode := SF_MutingSeq_State#Muting_Forward_Start;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MutingEnable AND (NOT MutingSwitch11 AND NOT MutingSwitch12 AND NOT MutingSwitch21 AND R_Trig_S22.Q)) THEN
					ControlCode := SF_MutingSeq_State#Muting_Backward_Start;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingSeq_State#Muting_Forward_Start:
				IF(NOT MutingEnable) THEN
					/* Error muting sequence */
					ControlCode := SF_MutingSeq_State#Error_Muting_Sequence_Base;
					DiagCode := TO_WORD(SF_MutingSeq_State#Error_Muting_Sequence_Base + 16#0F00 + MutingSeqGetErrorStateOfMutingSensors(MutingSwitch11, MutingSwitch12, MutingSwitch21, MutingSwitch22));
				ELSIF(NOT MutingSwitch11 OR MutingSwitch21 OR MutingSwitch22) THEN
					/* Error muting sequence */
					ControlCode := SF_MutingSeq_State#Error_Muting_Sequence_Base;
					DiagCode := TO_WORD(SF_MutingSeq_State#Error_Muting_Sequence_Base + 16#0100 + MutingSeqGetErrorStateOfMutingSensors(MutingSwitch11, MutingSwitch12, MutingSwitch21, MutingSwitch22));
				ELSIF(IS_NOT(S_AOPD_In)) THEN
					ControlCode := SF_MutingSeq_State#Safety_Demand_AOPD;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MutingEnable AND MutingSwitch11 AND R_Trig_S12.Q AND NOT MutingSwitch21 AND NOT MutingSwitch22) THEN
					ControlCode := SF_MutingSeq_State#Muting_Forward_Active;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingSeq_State#Muting_Forward_Active:
				IF(NOT MutingEnable) THEN
					/* Error muting sequence */
					ControlCode := SF_MutingSeq_State#Error_Muting_Sequence_Base;
					DiagCode := TO_WORD(SF_MutingSeq_State#Error_Muting_Sequence_Base + 16#0F00 + MutingSeqGetErrorStateOfMutingSensors(MutingSwitch11, MutingSwitch12, MutingSwitch21, MutingSwitch22));
				ELSIF((R_Trig_S11.Q OR R_Trig_S12.Q OR F_Trig_S22.Q)
					OR(MutingSwitch11 AND F_Trig_S12.Q)
					OR((MutingSwitch11 OR MutingSwitch12) AND (F_Trig_S21.Q))
					OR((NOT MutingSwitch11 OR NOT MutingSwitch12) AND NOT MutingSwitch22)
					OR(((NOT MutingSwitch11 OR NOT MutingSwitch12) OR NOT MutingSwitch21) AND R_Trig_S22.Q)
					OR(R_Trig_S21.Q AND R_Trig_S22.Q)
					OR(F_Trig_S11.Q AND F_Trig_S12.Q)
					OR(F_Trig_S12.Q AND F_Trig_S21.Q)) THEN
					/* Error muting sequence */
					ControlCode := SF_MutingSeq_State#Error_Muting_Sequence_Base;
					DiagCode := TO_WORD(SF_MutingSeq_State#Error_Muting_Sequence_Base + 16#0200 + MutingSeqGetErrorStateOfMutingSensors(MutingSwitch11, MutingSwitch12, MutingSwitch21, MutingSwitch22));
				ELSIF(MutingTimer.Q) THEN
					ControlCode := SF_MutingSeq_State#Error_Timer_MaxMuting;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(NOT MutingSwitch11 AND NOT MutingSwitch12 AND F_Trig_S21.Q AND MutingSwitch22) THEN
					ControlCode := SF_MutingSeq_State#AOPD_Free;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingSeq_State#Muting_Backward_Start:
				IF(NOT MutingEnable) THEN
					/* Error muting sequence */
					ControlCode := SF_MutingSeq_State#Error_Muting_Sequence_Base;
					DiagCode := TO_WORD(SF_MutingSeq_State#Error_Muting_Sequence_Base + 16#0F00 + MutingSeqGetErrorStateOfMutingSensors(MutingSwitch11, MutingSwitch12, MutingSwitch21, MutingSwitch22));
				ELSIF(MutingSwitch11 OR MutingSwitch12 OR NOT MutingSwitch22) THEN
					/* Error muting sequence */
					ControlCode := SF_MutingSeq_State#Error_Muting_Sequence_Base;
					DiagCode := TO_WORD(SF_MutingSeq_State#Error_Muting_Sequence_Base + 16#0300 + MutingSeqGetErrorStateOfMutingSensors(MutingSwitch11, MutingSwitch12, MutingSwitch21, MutingSwitch22));
				ELSIF(IS_NOT(S_AOPD_In)) THEN
					ControlCode := SF_MutingSeq_State#Safety_Demand_AOPD;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MutingEnable AND (NOT MutingSwitch11 AND NOT MutingSwitch12 AND R_Trig_S21.Q AND MutingSwitch22)) THEN
					ControlCode := SF_MutingSeq_State#Muting_Backward_Active;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingSeq_State#Muting_Backward_Active:
				IF(NOT MutingEnable) THEN
					/* Error muting sequence */
					ControlCode := SF_MutingSeq_State#Error_Muting_Sequence_Base;
					DiagCode := TO_WORD(SF_MutingSeq_State#Error_Muting_Sequence_Base + 16#0F00 + MutingSeqGetErrorStateOfMutingSensors(MutingSwitch11, MutingSwitch12, MutingSwitch21, MutingSwitch22));
				ELSIF((F_Trig_S11.Q OR R_Trig_S21.Q OR R_Trig_S22.Q)
					OR(MutingSwitch22 AND F_Trig_S21.Q)
					OR((MutingSwitch22 OR MutingSwitch21) AND F_Trig_S12.Q)
					OR((NOT MutingSwitch22 OR NOT MutingSwitch21) AND NOT MutingSwitch11)
					OR((NOT MutingSwitch22 OR NOT MutingSwitch21 OR NOT MutingSwitch12) AND R_Trig_S11.Q)
					OR(R_Trig_S11.Q AND R_Trig_S12.Q)
					OR(F_Trig_S22.Q AND F_Trig_S21.Q)
					OR(F_Trig_S21.Q AND F_Trig_S12.Q)) THEN
					/* Error muting sequence */
					ControlCode := SF_MutingSeq_State#Error_Muting_Sequence_Base;
					DiagCode := TO_WORD(SF_MutingSeq_State#Error_Muting_Sequence_Base + 16#0400 + MutingSeqGetErrorStateOfMutingSensors(MutingSwitch11, MutingSwitch12, MutingSwitch21, MutingSwitch22));
				ELSIF(MutingTimer.Q) THEN
					ControlCode := SF_MutingSeq_State#Error_Timer_MaxMuting;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MutingSwitch11 AND F_Trig_S12.Q AND NOT MutingSwitch21 AND NOT MutingSwitch22) THEN
					ControlCode := SF_MutingSeq_State#AOPD_Free;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
		ELSE
			/* TODO evaluation of Parameter Error C010 ends here, is this intended? */
			ENO := FALSE;
		END_CASE;
	END_IF;

	CASE TO_UINT(ControlCode) OF
		SF_MutingSeq_State#Idle:
			MutingTimer(IN := FALSE);
			Ready := FALSE;
			S_AOPD_OUT := SAFEBOOL_Constant#SAFEFALSE;
			S_MutingActive := SAFEBOOL_Constant#SAFEFALSE;
			SafetyDemand := FALSE;
			ResetRequest := FALSE;
			Error := FALSE;
		SF_MutingSeq_State#Init:
			MutingTimer(IN := FALSE);
			Ready := TRUE;
			S_AOPD_OUT := SAFEBOOL_Constant#SAFEFALSE;
			S_MutingActive := SAFEBOOL_Constant#SAFEFALSE;
			SafetyDemand := FALSE;
			ResetRequest := TRUE;
			Error := FALSE;
		SF_MutingSeq_State#Reset_Error_1,
		SF_MutingSeq_State#Reset_Error_2,
		SF_MutingSeq_State#Error_Muting_Sequence_Base,
		SF_MutingSeq_State#Parameter_Error,
		SF_MutingSeq_State#Error_Timer_MaxMuting:
			MutingTimer(IN := FALSE);
			Ready := TRUE;
			S_AOPD_OUT := SAFEBOOL_Constant#SAFEFALSE;
			S_MutingActive := SAFEBOOL_Constant#SAFEFALSE;
			SafetyDemand := FALSE;
			ResetRequest := FALSE;
			Error := TRUE;
		SF_MutingSeq_State#AOPD_Free:
			MutingTimer(IN := FALSE);
			Ready := TRUE;
			S_AOPD_OUT := SAFEBOOL_Constant#SAFETRUE;
			S_MutingActive := SAFEBOOL_Constant#SAFEFALSE;
			SafetyDemand := FALSE;
			ResetRequest := FALSE;
			Error := FALSE;
		SF_MutingSeq_State#Safety_Demand_AOPD:
			MutingTimer(IN := FALSE);
			Ready := TRUE;
			S_AOPD_OUT := SAFEBOOL_Constant#SAFEFALSE;
			S_MutingActive := SAFEBOOL_Constant#SAFEFALSE;
			SafetyDemand := TRUE;
			ResetRequest := FALSE;
			Error := FALSE;
		SF_MutingSeq_State#Wait_for_Reset:
			MutingTimer(IN := FALSE);
			Ready := TRUE;
			S_AOPD_OUT := SAFEBOOL_Constant#SAFEFALSE;
			S_MutingActive := SAFEBOOL_Constant#SAFEFALSE;
			SafetyDemand := FALSE;
			ResetRequest := TRUE;
			Error := FALSE;
		SF_MutingSeq_State#Safe:
			MutingTimer(IN := FALSE);
			Ready := TRUE;
			S_AOPD_OUT := SAFEBOOL_Constant#SAFEFALSE;
			S_MutingActive := SAFEBOOL_Constant#SAFEFALSE;
			SafetyDemand := FALSE;
			ResetRequest := FALSE;
			Error := FALSE;
		SF_MutingSeq_State#Muting_Forward_Start:
			MutingTimer(IN := FALSE);
			Ready := TRUE;
			S_AOPD_OUT := SAFEBOOL_Constant#SAFETRUE;
			S_MutingActive := SAFEBOOL_Constant#SAFEFALSE;
			SafetyDemand := FALSE;
			ResetRequest := FALSE;
			Error := FALSE;
		SF_MutingSeq_State#Muting_Forward_Active:
			MutingTimer(IN := TRUE, PT := MaxMutingTime);
			Ready := TRUE;
			S_AOPD_OUT := SAFEBOOL_Constant#SAFETRUE;
			S_MutingActive := SAFEBOOL_Constant#SAFETRUE;
			SafetyDemand := FALSE;
			ResetRequest := FALSE;
			Error := FALSE;
		SF_MutingSeq_State#Muting_Backward_Start:
			MutingTimer(IN := FALSE);
			Ready := TRUE;
			S_AOPD_OUT := SAFEBOOL_Constant#SAFETRUE;
			S_MutingActive := SAFEBOOL_Constant#SAFEFALSE;
			SafetyDemand := FALSE;
			ResetRequest := FALSE;
			Error := FALSE;
		SF_MutingSeq_State#Muting_Backward_Active:
			MutingTimer(IN := TRUE, PT := MaxMutingTime);
			Ready := TRUE;
			S_AOPD_OUT := SAFEBOOL_Constant#SAFETRUE;
			S_MutingActive := SAFEBOOL_Constant#SAFETRUE;
			SafetyDemand := FALSE;
			ResetRequest := FALSE;
			Error := FALSE;
	ELSE
		ENO := FALSE;
	END_CASE;

	ENO := ENO AND CheckSAFEBOOL(S_AOPD_In) AND CheckSAFEBOOL(S_StartReset);

END_FUNCTION_BLOCK

/* returns a UINT value that can be added to the DiagCode indicating which muting states were active prior to the Error */
FUNCTION MutingSeqGetErrorStateOfMutingSensors : UINT
	VAR_INPUT
		MS_11 : BOOL;
		MS_12 : BOOL;
		MS_21 : BOOL;
		MS_22 : BOOL;
	END_VAR
	VAR
		Result : UINT := 16#0000;
	END_VAR
	IF(MS_11) THEN
		Result := Result + 16#0010;
	END_IF;
	IF(MS_12) THEN
		Result := Result + 16#0020;
	END_IF;
	IF(MS_21) THEN
		Result := Result + 16#0040;
	END_IF;
	IF(MS_22) THEN
		Result := Result + 16#0080;
	END_IF;

	MutingSeqGetErrorStateOfMutingSensors := Result;
END_FUNCTION


END_NAMESPACE
END_NAMESPACE
