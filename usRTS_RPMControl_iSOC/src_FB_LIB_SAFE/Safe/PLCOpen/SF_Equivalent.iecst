USING logicals.web.standard.safe;

NAMESPACE logicals.web.standard.safe
NAMESPACE plcopen

TYPE
	SF_Equivalent_State : UINT(
	/* Discrepancy time elapsed in state 8802. */
	Error_1 := 16#C010,
	/* Discrepancy time elapsed in state 8804. */
	Error_2 := 16#C020,
	/* Discrepancy time elapsed in state 8806. */
	Error_3 := 16#C030,
	/* The function block is not active (initial state). */
	Idle := 16#0000,
	/* An activation has been detected by the FB and the FB is now activated. */
	Init := 16#8801,
	/* Output Enabled. The inputs switched to TRUE in equivalent mode. */
	Safety_Output_Enabled := 16#8000,
	/* Channel A has been switched to TRUE - waiting for Channel B; discrepancy timer started. */
	Wait_for_Channel_B := 16#8802,
	/* Channel B has been switched to TRUE - waiting for Channel A; discrepancy timer started. */
	Wait_for_Channel_A := 16#8804,
	/* One channel has been switched to FALSE; waiting for the second channel to be switched to FALSE, discrepancy timer started. */
	From_Active_Wait := 16#8806
	);
END_TYPE

/*
 * This function block converts two equivalent SAFEBOOL inputs (both NO or NC) to one SAFEBOOL output, including discrepancy time monitoring.
 * This FB should not be used stand-alone since it has no restart interlock.
 * It is required to connect the output to other safety related functionalities.
 */
FUNCTION_BLOCK SF_Equivalent
	{ altName := "SF_Equivalent"; bgColor := "Gold"; width := 380; }
	VAR_INPUT
		/* See Section 5.1.1 General Input Parameters */
		Activate : BOOL := FALSE;
		/* Variable. Input A for logical connection.
		 * FALSE: Contact A open
		 * TRUE: Contact A closed. */
		S_ChannelA : SAFEBOOL := SAFEBOOL_Constant#SAFEFALSE;
		/* Variable. Input B for logical connection.
		 * FALSE: Contact B open
		 * TRUE: Contact B closed. */
		S_ChannelB : SAFEBOOL := SAFEBOOL_Constant#SAFEFALSE;
		/* Constant. Maximum monitoring time for discrepancy status of both inputs. */
		DiscrepancyTime : TIME := T#0ms;
	END_VAR
	VAR_OUTPUT
		/* See Section 5.1.2 General Output Parameters */
		Ready : BOOL := FALSE;
		/* Safety related output
		 * FALSE: Minimum of one input signal = "FALSE" or status change outside of monitoring time.
		 * TRUE: Both input signals "active" and status change within monitoring time. */
		S_EquivalentOut : SAFEBOOL := SAFEBOOL_Constant#SAFEFALSE;
		/* Optional. See 5.1.2 General Output Parameters */
		SafetyDemand : BOOL := FALSE;
		/* See Section 5.1.2 General Output Parameters */
		Error : BOOL := FALSE;
		/* See Section 5.1.2 General Output Parameters */
		DiagCode : WORD := 16#0000;
	END_VAR
	VAR
		DiscrepancyTimer : TON;
	END_VAR

	IF(NOT Activate) THEN
		DiagCode := TO_WORD(SF_Equivalent_State#Idle);
	ELSE
		CASE TO_UINT(DiagCode) OF
			SF_Equivalent_State#Idle:
				/* IF(Activate) THEN - Active is always true here */
					DiagCode := TO_WORD(SF_Equivalent_State#Init);
			SF_Equivalent_State#Init:
				IF(IS(S_ChannelA) AND IS_NOT(S_ChannelB)) THEN
					DiagCode := TO_WORD(SF_Equivalent_State#Wait_for_Channel_B);
				ELSIF(IS(S_ChannelB) AND IS_NOT(S_ChannelA)) THEN
					DiagCode := TO_WORD(SF_Equivalent_State#Wait_for_Channel_A);
				ELSIF(IS(S_ChannelA) AND IS(S_ChannelB)) THEN
					DiagCode := TO_WORD(SF_Equivalent_State#Safety_Output_Enabled);
				END_IF;
			SF_Equivalent_State#Safety_Output_Enabled:
				IF(IS_NOT(S_ChannelA) AND IS_NOT(S_ChannelB)) THEN
					DiagCode := TO_WORD(SF_Equivalent_State#Init);
				ELSIF((S_ChannelA XOR S_ChannelB) <> 0) THEN
					DiagCode := TO_WORD(SF_Equivalent_State#From_Active_Wait);
				END_IF;
			SF_Equivalent_State#Wait_for_Channel_B:
				DiscrepancyTimer();
				IF(DiscrepancyTimer.Q) THEN
					DiagCode := TO_WORD(SF_Equivalent_State#Error_1);
				ELSIF(IS_NOT(S_ChannelA)) THEN
					DiagCode := TO_WORD(SF_Equivalent_State#Init);
				ELSIF(IS(S_ChannelB)) THEN
					DiagCode := TO_WORD(SF_Equivalent_State#Safety_Output_Enabled);
				END_IF;
			SF_Equivalent_State#Wait_for_Channel_A:
				DiscrepancyTimer();
				IF(DiscrepancyTimer.Q) THEN
					DiagCode := TO_WORD(SF_Equivalent_State#Error_2);
				ELSIF(IS_NOT(S_ChannelB)) THEN
					DiagCode := TO_WORD(SF_Equivalent_State#Init);
				ELSIF(IS(S_ChannelA)) THEN
					DiagCode := TO_WORD(SF_Equivalent_State#Safety_Output_Enabled);
				END_IF;
			SF_Equivalent_State#From_Active_Wait:
				DiscrepancyTimer();
				IF(DiscrepancyTimer.Q) THEN
					DiagCode := TO_WORD(SF_Equivalent_State#Error_3);
				ELSIF(IS_NOT(S_ChannelA) AND IS_NOT(S_ChannelB)) THEN
					DiagCode := TO_WORD(SF_Equivalent_State#Init);
				END_IF;
			SF_Equivalent_State#Error_1, SF_Equivalent_State#Error_2, SF_Equivalent_State#Error_3:
				IF(IS_NOT(S_ChannelA) AND IS_NOT(S_ChannelB)) THEN
					DiagCode := TO_WORD(SF_Equivalent_State#Init);
				END_IF;
			ELSE
				ENO := FALSE;
		END_CASE;
	END_IF;

	CASE TO_UINT(DiagCode) OF
		SF_Equivalent_State#Idle:
			DiscrepancyTimer(IN := FALSE);
			Ready := FALSE;
			S_EquivalentOut := SAFEBOOL_Constant#SAFEFALSE;
			SafetyDemand := FALSE;
			Error := FALSE;
		SF_Equivalent_State#Init:
			DiscrepancyTimer(IN := FALSE);
			Ready := TRUE;
			S_EquivalentOut := SAFEBOOL_Constant#SAFEFALSE;
			SafetyDemand := TRUE;
			Error := FALSE;
		SF_Equivalent_State#Safety_Output_Enabled:
			DiscrepancyTimer(IN := FALSE);
			Ready := TRUE;
			S_EquivalentOut := SAFEBOOL_Constant#SAFETRUE;
			SafetyDemand := FALSE;
			Error := FALSE;
		SF_Equivalent_State#Wait_for_Channel_B,SF_Equivalent_State#Wait_for_Channel_A,SF_Equivalent_State#From_Active_Wait:
			DiscrepancyTimer(IN := TRUE, PT := DiscrepancyTime);
			Ready := TRUE;
			S_EquivalentOut := SAFEBOOL_Constant#SAFEFALSE;
			SafetyDemand := TRUE;
			Error := FALSE;
		SF_Equivalent_State#Error_1,SF_Equivalent_State#Error_2,SF_Equivalent_State#Error_3:
			DiscrepancyTimer(IN := FALSE);
			Ready := TRUE;
			S_EquivalentOut := SAFEBOOL_Constant#SAFEFALSE;
			SafetyDemand := FALSE;
			Error := TRUE;
		ELSE
			ENO := FALSE;
	END_CASE;

	ENO := ENO AND CheckSAFEBOOL(S_ChannelA) AND CheckSAFEBOOL(S_ChannelB);

END_FUNCTION_BLOCK

END_NAMESPACE
END_NAMESPACE
