USING logicals.web.standard.safe;

NAMESPACE logicals.web.standard.safe
NAMESPACE plcopen

TYPE
	SF_MutingPar_State : UINT(
	/* Static Reset condition detected after FB activation in state 8401. */
	Reset_Error_1 := 16#C001,
	/* Static Reset condition detected in state 8402. */
	Reset_Error_2 := 16#C011,
	/* Error detected in muting sequence state 8000, 8010, 8310, 8020, 8040, 8030, 8330, 8110, 8410, 8120, 8140, 8130 or 8430. */
	Error_Muting_Sequence := 16#C004,
	/* DiscTime11_12, DiscTime21_22 or MaxMutingTime value out of range. */
	Parameter_Error := 16#C010,
	/* Timing error: Active muting time (when S_MutingActive = TRUE) exceeds MaxMutingTime. */
	Error_Timer_MaxMuting := 16#C020,
	/* Timing error: Discrepancy time for switching MutingSwitch11 and MutingSwitch12 > DiscTime11_12. */
	Error_Timer_MS11_12 := 16#C030,
	/* Timing error: Discrepancy time for switching MutingSwitch21 and MutingSwitch22 > DiscTime21_22. */
	Error_Timer_MS21_22 := 16#C040,
	/* Timing error: Discrepancy time for switching MutingSwitch21 and MutingSwitch22 > DiscTime21_22. */
	Idle := 16#0000,
	/* Muting not active and no safety demand from AOPD. If timers from subsequent muting are still running, they are stopped. */
	AOPD_Free := 16#8000,
	/* Function block has been activated. */
	Init := 16#8401,
	/* Safety demand detected by AOPD, muting not active. */
	Safety_Demand_AOPD := 16#8802,
	/* Safety demand or errors have been detected and are now cleared. Operator acknowledgment by Reset required. */
	Wait_for_Reset := 16#8402,
	/* Safety function activated. */
	Safe := 16#8002,
	/* Muting forward sequence is in starting phase after rising trigger of MutingSwitch 11.
	 * Monitoring of DiscTime11_12 is activated. Monitoring of MaxMutingTime is activated.
	 */
	Muting_Forward_Start_1 := 16#8010,
	/* Muting forward sequence is in starting phase after rising trigger of MutingSwitch 12. Monitoring of DiscTime11_12 is activated.
	 * Monitoring of MaxMutingTime is activated.
	 */
	Muting_Forward_Start_2 := 16#8310,
	/* Muting forward sequence is active either:
	 * - After rising trigger of the second entry MutingSwitch 12 or 11 has been detected.
	 * - When both MutingSwitch 11 and 12 have been actuated in the same cycle.
	 * Monitoring of DiscTime11_12 is stopped. Monitoring of MaxMutingTime is activated, when transition came directly from state 8000.
	 */
	Muting_Forward_Active_1 := 16#8020,
	/* Muting forward sequence is active. MutingSwitch21 is the first exit switch actuated. Monitoring of DiscTime21_22 is started. */
	Muting_Forward_Step_1 := 16#8030,
	/* Muting forward sequence is active. MutingSwitch22 is the first exit switch actuated. Monitoring of DiscTime21_22 is started. */
	Muting_Forward_Step_2 := 16#8330,
	/* Muting forward sequence is still active. Both MutingSwitch21 and 22 are actuated, the monitoring of DiscTime21_22 is stopped. */
	Muting_Forward_Active_2 := 16#8040,
	/* Muting backward sequence is in starting phase after rising trigger of MutingSwitch21.
	 * Monitoring of DiscTime21_22 is activated. Monitoring of MaxMutingTime is activated.
	 */
	Muting_Backward_Start_1 := 16#8110,
	/* Muting backward sequence is in starting phase after rising trigger of MutingSwitch22.
	 * Monitoring of DiscTime21_22 is activated. Monitoring of MaxMutingTime is activated.
	 */
	Muting_Backward_Start_2 := 16#8410,
	/* Muting backward sequence is active either:
	 * - After rising trigger of the second MutingSwitch 21 or 22 has been detected.
	 * - When both MutingSwitch 21 and 22 have been actuated in the same cycle.
	 * Monitoring of DiscTime21_22 is stopped. Monitoring of MaxMuting-Time is activated, when transition came directly from state 8000.
	 */
	Muting_Backward_Active_1 := 16#8120,
	/* Muting backward sequence is active. MutingSwitch11 is the first exit switch actuated. Monitoring of DiscTime11_12 is started. */
	Muting_Backward_Step_1 := 16#8130,
	/* Muting backward sequence is active. MutingSwitch12 is the first exit switch actuated. Monitoring of DiscTime11_12 is started. */
	Muting_Backward_Step_2 := 16#8430,
	/* Muting backward sequence is still active. Both exit switches MutingSwitch11 and 12 are actuated, the monitoring of DiscTime11_12 is stopped. */
	Muting_Backward_Active_2 := 16#8140
	);
END_TYPE

/* Muting is the intended suppression of the safety function. In this FB, parallel muting with four muting sensors is specified. */

FUNCTION_BLOCK SF_MutingPar
	{ altName:="SF_MutingPar"; bgColor:="Gold"; width:=360; }
	VAR_INPUT
		/* See Section 5.1.1 General Input Parameters */
		Activate : BOOL := FALSE;
		/* Variable.
		 * OSSD signal from AOPD.
		 * FALSE: Protection field interrupted.
		 * TRUE: Protection field not interrupted.
		 */
		S_AOPD_In : SAFEBOOL := SAFEBOOL_Constant#SAFEFALSE;
		/* Variable.
		 * Status of Muting sensor 11.
		 * FALSE: Muting sensor 11 not actuated.
		 * TRUE: Workpiece actuates muting sensor 11.
		 * Depending on the safety requirements it can be necessary to connect a SAFEBOOL.
		 */
		MutingSwitch11 : BOOL := FALSE;
		/* Variable.
		 * Status of Muting sensor 12.
		 * FALSE: Muting sensor 12 not actuated.
		 * TRUE: Workpiece actuates muting sensor 12.
		 * Depending on the safety requirements it can be necessary to connect a SAFEBOOL.
		 */
		MutingSwitch12 : BOOL := FALSE;
		/* Variable.
		 * Status of Muting sensor 21.
		 * FALSE: Muting sensor 21 not actuated.
		 * TRUE: Workpiece actuates muting sensor 21.
		 * Depending on the safety requirements it can be necessary to connect a SAFEBOOL.
		 */
		MutingSwitch21 : BOOL := FALSE;
		/* Variable.
		 * Status of Muting sensor 22.
		 * FALSE: Muting sensor 22 not actuated.
		 * TRUE: Workpiece actuates muting sensor 22.
		 * Depending on the safety requirements it can be necessary to connect a SAFEBOOL.
		 */
		MutingSwitch22 : BOOL := FALSE;
		/* Constant 0..4 s;
		 * Maximum discrepancy time for MutingSwitch11 and MutingSwitch12.
		 */
		DiscTime11_12 : TIME := T#0s;
		/* Constant 0..4 s;
		 * Maximum discrepancy time for MutingSwitch21 and MutingSwitch22.
		 */
		DiscTime21_22 : TIME := T#0s;
		/* Constant 0..120 min (application area specific);
		 * Maximum time for complete muting sequence, timer started when first 2 muting sensors are actuated.
		 */
		MaxMutingTime : TIME := T#0s;
		/* Variable or constant.
		 * Command by the control system that enables the start of the muting function when needed by the machine cycle.
		 * After the start of the muting function, this signal can be switched off.
		 * FALSE: Muting not enabled
		 * TRUE: Start of Muting function enabled
		 */
		MutingEnable : BOOL := FALSE;
		/* See Section 5.1.1 General Input Parameters */
		S_StartReset : SAFEBOOL := SAFEBOOL_Constant#SAFEFALSE;
		/* See Section 5.1.1 General Input Parameters */
		Reset : BOOL := FALSE;
	END_VAR
	VAR_OUTPUT
		/* See Section 5.1.2 General Output Parameters */
		Ready : BOOL := FALSE;
		/* Safety related output, indicates status of the muted guard.
		 * FALSE: AOPD protection field interrupted and muting not active.
		 * TRUE: AOPD protection field not interrupted or muting active.
		 */
		S_AOPD_Out : SAFEBOOL := SAFEBOOL_Constant#SAFEFALSE;
		/* Indicates status of Muting process.
		 * FALSE: Muting not active.
		 * TRUE: Muting active.
		 */
		S_MutingActive : SAFEBOOL := SAFEBOOL_Constant#SAFEFALSE;
		/* Optional. See 5.1.2 General Output Parameters */
		SafetyDemand : BOOL := FALSE;
		/* Optional. See 5.1.2 General Output Parameters */
		ResetRequest : BOOL := FALSE;
		/* See Section 5.1.2 General Output Parameters */
		Error : BOOL := FALSE;
		/* See Section 5.1.2 General Output Parameters */
		DiagCode : WORD := 16#000;
	END_VAR
	VAR
		/* ControlCode is used for state tracking */
		ControlCode : UINT := 16#0000;
		DiscTimer11_12 : TON;
		DiscTimer21_22 : TON;
		MaxMutingTimer : TON;
		R_Trig_Reset : R_TRIG;
		R_Trig_S11: R_TRIG;
		R_Trig_S12: R_TRIG;
		R_Trig_S21: R_TRIG;
		R_Trig_S22: R_TRIG;
		F_Trig_S11: F_TRIG;
		F_Trig_S12: F_TRIG;
		F_Trig_S21: F_TRIG;
		F_Trig_S22: F_TRIG;
	END_VAR

	R_Trig_Reset(Reset);
	R_Trig_S11(MutingSwitch11);
	R_Trig_S12(MutingSwitch12);
	R_Trig_S21(MutingSwitch21);
	R_Trig_S22(MutingSwitch22);
	F_Trig_S11(MutingSwitch11);
	F_Trig_S12(MutingSwitch12);
	F_Trig_S21(MutingSwitch21);
	F_Trig_S22(MutingSwitch22);

	IF(NOT Activate) THEN
		ControlCode := SF_MutingPar_State#Idle;
		DiagCode := TO_WORD(ControlCode);
	ELSE
		CASE TO_UINT(ControlCode) OF
			SF_MutingPar_State#Idle:
				/* IF(Activate) THEN - Active is always true here */
					ControlCode := SF_MutingPar_State#Init;
					DiagCode := TO_WORD(ControlCode);
			SF_MutingPar_State#Init:
				IF(Reset AND NOT R_Trig_Reset.Q) THEN
					ControlCode := SF_MutingPar_State#Reset_Error_1;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(DiscTime11_12 > T#4s OR DiscTime11_12 < T#0s OR DiscTime21_22 > T#4s OR DiscTime21_22 < T#0s OR MaxMutingTime > T#120m OR MaxMutingTime < T#0m) THEN
					ControlCode := SF_MutingPar_State#Parameter_Error;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(R_Trig_Reset.Q OR IS(S_StartReset)) THEN
					ControlCode := SF_MutingPar_State#Safe;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingPar_State#Reset_Error_1:
				IF(NOT Reset) THEN
					ControlCode := SF_MutingPar_State#Init;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingPar_State#Safe:
				IF(IS_NOT(S_AOPD_In)) THEN
					ControlCode := SF_MutingPar_State#Safety_Demand_AOPD;
					DiagCode := TO_WORD(ControlCode);
				/* ELSIF(IS(S_AOPD_In)) THEN */
				ELSE
					ControlCode := SF_MutingPar_State#AOPD_Free;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingPar_State#Safety_Demand_AOPD:
				IF(IS(S_AOPD_In)) THEN
					ControlCode := SF_MutingPar_State#Wait_for_Reset;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingPar_State#Wait_for_Reset:
				IF(Reset AND NOT R_Trig_Reset.Q) THEN
					ControlCode := SF_MutingPar_State#Reset_Error_2;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(R_Trig_Reset.Q) THEN
					ControlCode := SF_MutingPar_State#Safe;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingPar_State#Reset_Error_2:
				IF(NOT Reset) THEN
					ControlCode := SF_MutingPar_State#Wait_for_Reset;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingPar_State#AOPD_Free:
				/* MutingEnable missing when muting sequence starts */
				IF(NOT MutingEnable) THEN
					IF((R_Trig_S11.Q AND NOT MutingSwitch12 AND NOT MutingSwitch21 AND NOT MutingSwitch22) OR
						(NOT MutingSwitch11 AND R_Trig_S12.Q AND NOT MutingSwitch21 AND NOT MutingSwitch22) OR
						(NOT MutingSwitch22 AND R_Trig_S21.Q AND NOT MutingSwitch11 AND NOT MutingSwitch12) OR
						(R_Trig_S22.Q AND NOT MutingSwitch21 AND NOT MutingSwitch11 AND NOT MutingSwitch12) OR
						(R_Trig_S11.Q AND R_Trig_S12.Q AND NOT MutingSwitch21 AND NOT MutingSwitch22) OR
						(R_Trig_S21.Q AND R_Trig_S22.Q AND NOT MutingSwitch11 AND NOT MutingSwitch12)) THEN
							ControlCode := SF_MutingPar_State#Error_Muting_Sequence;
							DiagCode := TO_WORD(SF_MutingPar_State#Error_Muting_Sequence + 16#0F00 + MutingParGetErrorStateOfMutingSensors(MutingSwitch11, MutingSwitch12, MutingSwitch21, MutingSwitch22));
					END_IF;
				/* wrong muting sequence */
				ELSIF((MutingSwitch11 OR MutingSwitch12) AND (MutingSwitch21 OR MutingSwitch22)) OR
					(R_Trig_S11.Q AND MutingSwitch12 AND NOT R_Trig_S12.Q) OR
					(R_Trig_S12.Q AND MutingSwitch11 AND NOT R_Trig_S11.Q) OR
					(R_Trig_S21.Q AND MutingSwitch22 AND NOT R_Trig_S22.Q) OR
					(R_Trig_S22.Q AND MutingSwitch21 AND NOT R_Trig_S21.Q) OR
					((MutingSwitch11 AND NOT R_Trig_S11.Q) AND (MutingSwitch12 AND NOT R_Trig_S12.Q)) OR
					((MutingSwitch21 AND NOT R_Trig_S21.Q) AND (MutingSwitch22 AND NOT R_Trig_S22.Q)) THEN
						ControlCode := SF_MutingPar_State#Error_Muting_Sequence;
						DiagCode := TO_WORD(SF_MutingPar_State#Error_Muting_Sequence + MutingParGetErrorStateOfMutingSensors(MutingSwitch11, MutingSwitch12, MutingSwitch21, MutingSwitch22));
				ELSIF(IS_NOT(S_AOPD_In)) THEN
					ControlCode := SF_MutingPar_State#Safety_Demand_AOPD;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MutingEnable AND (R_Trig_S11.Q AND NOT MutingSwitch12 AND NOT MutingSwitch21 AND NOT MutingSwitch22)) THEN
					ControlCode := SF_MutingPar_State#Muting_Forward_Start_1;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MutingEnable AND (NOT MutingSwitch11 AND R_Trig_S12.Q AND NOT MutingSwitch21 AND NOT MutingSwitch22)) THEN
					ControlCode := SF_MutingPar_State#Muting_Forward_Start_2;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MutingEnable AND (NOT MutingSwitch22 AND R_Trig_S21.Q AND NOT MutingSwitch11 AND NOT MutingSwitch12)) THEN
					ControlCode := SF_MutingPar_State#Muting_Backward_Start_1;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MutingEnable AND (R_Trig_S22.Q AND NOT MutingSwitch21 AND NOT MutingSwitch11 AND NOT MutingSwitch12)) THEN
					ControlCode := SF_MutingPar_State#Muting_Backward_Start_2;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MutingEnable AND (R_Trig_S11.Q AND R_Trig_S12.Q AND NOT MutingSwitch21 AND NOT MutingSwitch22)) THEN
					ControlCode := SF_MutingPar_State#Muting_Forward_Active_1;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MutingEnable AND (R_Trig_S21.Q AND R_Trig_S22.Q AND NOT MutingSwitch11 AND NOT MutingSwitch12)) THEN
					ControlCode := SF_MutingPar_State#Muting_Backward_Active_1;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingPar_State#Muting_Forward_Start_1:
				DiscTimer11_12();
				MaxMutingTimer();
				IF(NOT MutingEnable) THEN
					ControlCode := SF_MutingPar_State#Error_Muting_Sequence;
					DiagCode := TO_WORD(SF_MutingPar_State#Error_Muting_Sequence + 16#0F00 + MutingParGetErrorStateOfMutingSensors(MutingSwitch11, MutingSwitch12, MutingSwitch21, MutingSwitch22));
				ELSIF(NOT MutingSwitch11 OR MutingSwitch21 OR MutingSwitch22) THEN
					ControlCode := SF_MutingPar_State#Error_Muting_Sequence;
					DiagCode := TO_WORD(SF_MutingPar_State#Error_Muting_Sequence + 16#0100 + MutingParGetErrorStateOfMutingSensors(MutingSwitch11, MutingSwitch12, MutingSwitch21, MutingSwitch22));
				ELSIF(DiscTimer11_12.Q) THEN
					ControlCode := SF_MutingPar_State#Error_Timer_MS11_12;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MaxMutingTimer.Q) THEN
					ControlCode := SF_MutingPar_State#Error_Timer_MaxMuting;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(IS_NOT(S_AOPD_In)) THEN
					ControlCode := SF_MutingPar_State#Safety_Demand_AOPD;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MutingEnable AND(MutingSwitch11 AND R_Trig_S12.Q AND NOT MutingSwitch21 AND NOT MutingSwitch22)) THEN
					ControlCode := SF_MutingPar_State#Muting_Forward_Active_1;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingPar_State#Muting_Forward_Start_2:
				DiscTimer11_12();
				MaxMutingTimer();
				IF(NOT MutingEnable) THEN
					ControlCode := SF_MutingPar_State#Error_Muting_Sequence;
					DiagCode := TO_WORD(SF_MutingPar_State#Error_Muting_Sequence + 16#0F00 + MutingParGetErrorStateOfMutingSensors(MutingSwitch11, MutingSwitch12, MutingSwitch21, MutingSwitch22));
				ELSIF(NOT MutingSwitch12 OR MutingSwitch21 OR MutingSwitch22) THEN
					ControlCode := SF_MutingPar_State#Error_Muting_Sequence;
					DiagCode := TO_WORD(SF_MutingPar_State#Error_Muting_Sequence + 16#0200 + MutingParGetErrorStateOfMutingSensors(MutingSwitch11, MutingSwitch12, MutingSwitch21, MutingSwitch22));
				ELSIF(DiscTimer11_12.Q) THEN
					ControlCode := SF_MutingPar_State#Error_Timer_MS11_12;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MaxMutingTimer.Q) THEN
					ControlCode := SF_MutingPar_State#Error_Timer_MaxMuting;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(IS_NOT(S_AOPD_In)) THEN
					ControlCode := SF_MutingPar_State#Safety_Demand_AOPD;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(R_Trig_S11.Q AND MutingSwitch12 AND NOT MutingSwitch21 AND NOT MutingSwitch22) THEN
					ControlCode := SF_MutingPar_State#Muting_Forward_Active_1;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingPar_State#Muting_Backward_Start_1:
				DiscTimer21_22();
				MaxMutingTimer();
				IF(NOT MutingEnable) THEN
					ControlCode := SF_MutingPar_State#Error_Muting_Sequence;
					DiagCode := TO_WORD(SF_MutingPar_State#Error_Muting_Sequence + 16#0F00 + MutingParGetErrorStateOfMutingSensors(MutingSwitch11, MutingSwitch12, MutingSwitch21, MutingSwitch22));
				ELSIF(MutingSwitch11 OR MutingSwitch12 OR NOT MutingSwitch21) THEN
					ControlCode := SF_MutingPar_State#Error_Muting_Sequence;
					DiagCode := TO_WORD(SF_MutingPar_State#Error_Muting_Sequence + 16#0700 + MutingParGetErrorStateOfMutingSensors(MutingSwitch11, MutingSwitch12, MutingSwitch21, MutingSwitch22));
				ELSIF(DiscTimer21_22.Q) THEN
					ControlCode := SF_MutingPar_State#Error_Timer_MS21_22;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MaxMutingTimer.Q) THEN
					ControlCode := SF_MutingPar_State#Error_Timer_MaxMuting;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(IS_NOT(S_AOPD_In)) THEN
					ControlCode := SF_MutingPar_State#Safety_Demand_AOPD;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MutingEnable AND (MutingSwitch21 AND R_Trig_S22.Q AND NOT MutingSwitch11 AND NOT MutingSwitch12)) THEN
					ControlCode := SF_MutingPar_State#Muting_Backward_Active_1;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingPar_State#Muting_Backward_Start_2:
				DiscTimer21_22();
				MaxMutingTimer();
				IF(NOT MutingEnable) THEN
					ControlCode := SF_MutingPar_State#Error_Muting_Sequence;
					DiagCode := TO_WORD(SF_MutingPar_State#Error_Muting_Sequence + 16#0F00 + MutingParGetErrorStateOfMutingSensors(MutingSwitch11, MutingSwitch12, MutingSwitch21, MutingSwitch22));
				ELSIF(MutingSwitch11 OR MutingSwitch12 OR NOT MutingSwitch22) THEN
					ControlCode := SF_MutingPar_State#Error_Muting_Sequence;
					DiagCode := TO_WORD(SF_MutingPar_State#Error_Muting_Sequence + 16#0800 + MutingParGetErrorStateOfMutingSensors(MutingSwitch11, MutingSwitch12, MutingSwitch21, MutingSwitch22));
				ELSIF(DiscTimer21_22.Q) THEN
					ControlCode := SF_MutingPar_State#Error_Timer_MS21_22;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MaxMutingTimer.Q) THEN
					ControlCode := SF_MutingPar_State#Error_Timer_MaxMuting;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(IS_NOT(S_AOPD_In)) THEN
					ControlCode := SF_MutingPar_State#Safety_Demand_AOPD;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MutingEnable AND (R_Trig_S21.Q AND MutingSwitch22 AND NOT MutingSwitch11 AND NOT MutingSwitch12)) THEN
					ControlCode := SF_MutingPar_State#Muting_Backward_Active_1;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingPar_State#Muting_Forward_Active_1:
				MaxMutingTimer();
				IF(NOT MutingSwitch11 OR NOT MutingSwitch12) THEN
					ControlCode := SF_MutingPar_State#Error_Muting_Sequence;
					DiagCode := TO_WORD(SF_MutingPar_State#Error_Muting_Sequence + 16#0300 + MutingParGetErrorStateOfMutingSensors(MutingSwitch11, MutingSwitch12, MutingSwitch21, MutingSwitch22));
				ELSIF(MaxMutingTimer.Q) THEN
					ControlCode := SF_MutingPar_State#Error_Timer_MaxMuting;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MutingSwitch11 AND MutingSwitch12 AND MutingSwitch21 AND MutingSwitch22) THEN
					ControlCode := SF_MutingPar_State#Muting_Forward_Active_2;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MutingSwitch11 AND MutingSwitch12 AND R_Trig_S21.Q AND NOT MutingSwitch22) THEN
					ControlCode := SF_MutingPar_State#Muting_Forward_Step_1;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MutingSwitch11 AND MutingSwitch12 AND NOT MutingSwitch21 AND R_Trig_S22.Q) THEN
					ControlCode := SF_MutingPar_State#Muting_Forward_Step_2;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingPar_State#Muting_Forward_Step_1:
				DiscTimer21_22();
				MaxMutingTimer();
				IF(NOT MutingSwitch11 OR NOT MutingSwitch12 OR NOT MutingSwitch21) THEN
					ControlCode := SF_MutingPar_State#Error_Muting_Sequence;
					DiagCode := TO_WORD(SF_MutingPar_State#Error_Muting_Sequence + 16#0400 + MutingParGetErrorStateOfMutingSensors(MutingSwitch11, MutingSwitch12, MutingSwitch21, MutingSwitch22));
				ELSIF(DiscTimer21_22.Q) THEN
					ControlCode := SF_MutingPar_State#Error_Timer_MS21_22;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MaxMutingTimer.Q) THEN
					ControlCode := SF_MutingPar_State#Error_Timer_MaxMuting;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MutingSwitch11 AND MutingSwitch12 AND MutingSwitch21 AND R_Trig_S22.Q) THEN
					ControlCode := SF_MutingPar_State#Muting_Forward_Active_2;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingPar_State#Muting_Forward_Step_2:
				DiscTimer21_22();
				MaxMutingTimer();
				IF(NOT MutingSwitch11 OR NOT MutingSwitch12 OR NOT MutingSwitch22) THEN
					ControlCode := SF_MutingPar_State#Error_Muting_Sequence;
					DiagCode := TO_WORD(SF_MutingPar_State#Error_Muting_Sequence + 16#0500 + MutingParGetErrorStateOfMutingSensors(MutingSwitch11, MutingSwitch12, MutingSwitch21, MutingSwitch22));
				ELSIF(DiscTimer21_22.Q) THEN
					ControlCode := SF_MutingPar_State#Error_Timer_MS21_22;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MaxMutingTimer.Q) THEN
					ControlCode := SF_MutingPar_State#Error_Timer_MaxMuting;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MutingSwitch11 AND MutingSwitch12 AND R_Trig_S21.Q AND MutingSwitch22) THEN
					ControlCode := SF_MutingPar_State#Muting_Forward_Active_2;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingPar_State#Muting_Forward_Active_2:
				MaxMutingTimer();
				IF(R_Trig_S11.Q OR R_Trig_S12.Q OR R_Trig_S21.Q OR R_Trig_S22.Q) OR
					((MutingSwitch11 OR MutingSwitch12) AND (F_Trig_S21.Q OR F_Trig_S22.Q)) OR
					((F_Trig_S11.Q OR F_Trig_S12.Q) AND (F_Trig_S21.Q OR F_Trig_S22.Q)) THEN
						ControlCode := SF_MutingPar_State#Error_Muting_Sequence;
						DiagCode := TO_WORD(SF_MutingPar_State#Error_Muting_Sequence + 16#0600 + MutingParGetErrorStateOfMutingSensors(MutingSwitch11, MutingSwitch12, MutingSwitch21, MutingSwitch22));
				ELSIF(MaxMutingTimer.Q) THEN
					ControlCode := SF_MutingPar_State#Error_Timer_MaxMuting;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(NOT MutingSwitch11 AND NOT MutingSwitch12) AND (F_Trig_S21.Q OR F_Trig_S22.Q) THEN
					ControlCode := SF_MutingPar_State#AOPD_Free;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingPar_State#Muting_Backward_Active_1:
				MaxMutingTimer();
				IF(NOT MutingSwitch21 OR NOT MutingSwitch22) THEN
					ControlCode := SF_MutingPar_State#Error_Muting_Sequence;
					DiagCode := TO_WORD(SF_MutingPar_State#Error_Muting_Sequence + 16#0900 + MutingParGetErrorStateOfMutingSensors(MutingSwitch11, MutingSwitch12, MutingSwitch21, MutingSwitch22));
				ELSIF(MaxMutingTimer.Q) THEN
					ControlCode := SF_MutingPar_State#Error_Timer_MaxMuting;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MutingSwitch11 AND MutingSwitch12 AND MutingSwitch21 AND MutingSwitch22) THEN
					ControlCode := SF_MutingPar_State#Muting_Backward_Active_2;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MutingSwitch21 AND MutingSwitch22 AND R_Trig_S11.Q AND NOT MutingSwitch12) THEN
					ControlCode := SF_MutingPar_State#Muting_Backward_Step_1;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MutingSwitch21 AND MutingSwitch22 AND NOT MutingSwitch11 AND R_Trig_S12.Q) THEN
					ControlCode := SF_MutingPar_State#Muting_Backward_Step_2;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingPar_State#Muting_Backward_Step_1:
				MaxMutingTimer();
				DiscTimer11_12();
				IF(NOT MutingSwitch21 OR NOT MutingSwitch22 OR NOT MutingSwitch11) THEN
					ControlCode := SF_MutingPar_State#Error_Muting_Sequence;
					DiagCode := TO_WORD(SF_MutingPar_State#Error_Muting_Sequence + 16#0A00 + MutingParGetErrorStateOfMutingSensors(MutingSwitch11, MutingSwitch12, MutingSwitch21, MutingSwitch22));
				ELSIF(DiscTimer11_12.Q) THEN
					ControlCode := SF_MutingPar_State#Error_Timer_MS11_12;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MaxMutingTimer.Q) THEN
					ControlCode := SF_MutingPar_State#Error_Timer_MaxMuting;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MutingSwitch21 AND MutingSwitch22 AND MutingSwitch11 AND R_Trig_S12.Q) THEN
					ControlCode := SF_MutingPar_State#Muting_Backward_Active_2;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingPar_State#Muting_Backward_Step_2:
				MaxMutingTimer();
				DiscTimer11_12();
				IF(NOT MutingSwitch21 OR NOT MutingSwitch22 OR NOT MutingSwitch12) THEN
					ControlCode := SF_MutingPar_State#Error_Muting_Sequence;
					DiagCode := TO_WORD(SF_MutingPar_State#Error_Muting_Sequence + 16#0B00 + MutingParGetErrorStateOfMutingSensors(MutingSwitch11, MutingSwitch12, MutingSwitch21, MutingSwitch22));
				ELSIF(DiscTimer11_12.Q) THEN
					ControlCode := SF_MutingPar_State#Error_Timer_MS11_12;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MaxMutingTimer.Q) THEN
					ControlCode := SF_MutingPar_State#Error_Timer_MaxMuting;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(MutingSwitch21 AND MutingSwitch22 AND R_Trig_S11.Q AND MutingSwitch12) THEN
					ControlCode := SF_MutingPar_State#Muting_Backward_Active_2;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingPar_State#Muting_Backward_Active_2:
				MaxMutingTimer();
				IF(R_Trig_S11.Q OR R_Trig_S12.Q OR R_Trig_S21.Q OR R_Trig_S22.Q) OR
					((MutingSwitch21 OR MutingSwitch22) AND (F_Trig_S11.Q OR F_Trig_S12.Q)) OR
					((F_Trig_S11.Q OR F_Trig_S12.Q) AND (F_Trig_S21.Q OR F_Trig_S22.Q)) THEN
						ControlCode := SF_MutingPar_State#Error_Muting_Sequence;
						DiagCode := TO_WORD(SF_MutingPar_State#Error_Muting_Sequence + 16#0C00 + MutingParGetErrorStateOfMutingSensors(MutingSwitch11, MutingSwitch12, MutingSwitch21, MutingSwitch22));
				ELSIF(MaxMutingTimer.Q) THEN
					ControlCode := SF_MutingPar_State#Error_Timer_MaxMuting;
					DiagCode := TO_WORD(ControlCode);
				ELSIF(NOT MutingSwitch21 AND NOT MutingSwitch22 AND(F_Trig_S11.Q OR F_Trig_S12.Q)) THEN
					ControlCode := SF_MutingPar_State#AOPD_Free;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			SF_MutingPar_State#Error_Timer_MaxMuting,
			SF_MutingPar_State#Error_Timer_MS11_12,
			SF_MutingPar_State#Error_Timer_MS21_22:
				IF(NOT(MutingSwitch11 OR MutingSwitch12 OR MutingSwitch21 OR MutingSwitch22)) THEN
					ControlCode := SF_MutingPar_State#Wait_for_Reset;
					DiagCode := TO_WORD(ControlCode);
				END_IF;
			ELSE
				ENO := FALSE;
		END_CASE;
	END_IF;

	CASE TO_UINT(ControlCode) OF
		SF_MutingPar_State#Reset_Error_1,
		SF_MutingPar_State#Reset_Error_2,
		SF_MutingPar_State#Parameter_Error,
		SF_MutingPar_State#Error_Timer_MaxMuting,
		SF_MutingPar_State#Error_Timer_MS11_12,
		SF_MutingPar_State#Error_Timer_MS21_22:
			DiscTimer11_12(IN := FALSE);
			DiscTimer21_22(IN := FALSE);
			MaxMutingTimer(IN := FALSE);
			Ready := TRUE;
			S_AOPD_Out := SAFEBOOL_Constant#SAFEFALSE;
			S_MutingActive := SAFEBOOL_Constant#SAFEFALSE;
			SafetyDemand := FALSE;
			ResetRequest := FALSE;
			Error := TRUE;
		SF_MutingPar_State#Error_Muting_Sequence:
			DiscTimer11_12(IN := FALSE);
			DiscTimer21_22(IN := FALSE);
			MaxMutingTimer(IN := FALSE);
			Ready := TRUE;
			S_AOPD_Out := SAFEBOOL_Constant#SAFEFALSE;
			S_MutingActive := SAFEBOOL_Constant#SAFEFALSE;
			SafetyDemand := FALSE;
			ResetRequest := FALSE;
			Error := TRUE;
		SF_MutingPar_State#Idle:
			DiscTimer11_12(IN := FALSE);
			DiscTimer21_22(IN := FALSE);
			MaxMutingTimer(IN := FALSE);
			Ready := FALSE;
			S_AOPD_Out := SAFEBOOL_Constant#SAFEFALSE;
			S_MutingActive := SAFEBOOL_Constant#SAFEFALSE;
			SafetyDemand := FALSE;
			ResetRequest := FALSE;
			Error := FALSE;
		SF_MutingPar_State#AOPD_Free:
			DiscTimer11_12(IN := FALSE);
			DiscTimer21_22(IN := FALSE);
			MaxMutingTimer(IN := FALSE);
			Ready := TRUE;
			S_AOPD_Out := SAFEBOOL_Constant#SAFETRUE;
			S_MutingActive := SAFEBOOL_Constant#SAFEFALSE;
			SafetyDemand := FALSE;
			ResetRequest := FALSE;
			Error := FALSE;
		SF_MutingPar_State#Muting_Forward_Start_1,
		SF_MutingPar_State#Muting_Forward_Start_2:
			DiscTimer11_12(IN := TRUE, PT := DiscTime11_12);
			DiscTimer21_22(IN := FALSE);
			MaxMutingTimer(IN := TRUE, PT := MaxMutingTime);
			Ready := TRUE;
			S_AOPD_Out := SAFEBOOL_Constant#SAFETRUE;
			S_MutingActive := SAFEBOOL_Constant#SAFEFALSE;
			SafetyDemand := FALSE;
			ResetRequest := FALSE;
			Error := FALSE;
		SF_MutingPar_State#Muting_Backward_Start_1,
		SF_MutingPar_State#Muting_Backward_Start_2:
			DiscTimer11_12(IN := FALSE);
			DiscTimer21_22(IN := TRUE, PT := DiscTime21_22);
			MaxMutingTimer(IN := TRUE, PT := MaxMutingTime);
			Ready := TRUE;
			S_AOPD_Out := SAFEBOOL_Constant#SAFETRUE;
			S_MutingActive := SAFEBOOL_Constant#SAFEFALSE;
			SafetyDemand := FALSE;
			ResetRequest := FALSE;
			Error := FALSE;
		SF_MutingPar_State#Init,
		SF_MutingPar_State#Wait_for_Reset:
			DiscTimer11_12(IN := FALSE);
			DiscTimer21_22(IN := FALSE);
			MaxMutingTimer(IN := FALSE);
			Ready := TRUE;
			S_AOPD_Out := SAFEBOOL_Constant#SAFEFALSE;
			S_MutingActive := SAFEBOOL_Constant#SAFEFALSE;
			SafetyDemand := FALSE;
			ResetRequest := TRUE;
			Error := FALSE;
		SF_MutingPar_State#Safety_Demand_AOPD:
			DiscTimer11_12(IN := FALSE);
			DiscTimer21_22(IN := FALSE);
			MaxMutingTimer(IN := FALSE);
			Ready := TRUE;
			S_AOPD_Out := SAFEBOOL_Constant#SAFEFALSE;
			S_MutingActive := SAFEBOOL_Constant#SAFEFALSE;
			SafetyDemand := TRUE;
			ResetRequest := FALSE;
			Error := FALSE;
		SF_MutingPar_State#Safe:
			DiscTimer11_12(IN := FALSE);
			DiscTimer21_22(IN := FALSE);
			MaxMutingTimer(IN := FALSE);
			Ready := TRUE;
			S_AOPD_Out := SAFEBOOL_Constant#SAFEFALSE;
			S_MutingActive := SAFEBOOL_Constant#SAFEFALSE;
			SafetyDemand := FALSE;
			ResetRequest := FALSE;
			Error := FALSE;
		SF_MutingPar_State#Muting_Backward_Active_1:
			DiscTimer11_12(IN := FALSE);
			DiscTimer21_22(IN := FALSE);
			IF(MutingEnable AND (R_Trig_S21.Q AND R_Trig_S22.Q AND NOT MutingSwitch11 AND NOT MutingSwitch12)) THEN
				MaxMutingTimer(IN := TRUE, PT:= MaxMutingTime);
			END_IF;
			Ready := TRUE;
			S_AOPD_Out := SAFEBOOL_Constant#SAFETRUE;
			S_MutingActive := SAFEBOOL_Constant#SAFETRUE;
			SafetyDemand := FALSE;
			ResetRequest := FALSE;
			Error := FALSE;
		SF_MutingPar_State#Muting_Backward_Step_1,
		SF_MutingPar_State#Muting_Backward_Step_2:
			DiscTimer11_12(IN := TRUE, PT := DiscTime11_12);
			DiscTimer21_22(IN := FALSE);
			Ready := TRUE;
			S_AOPD_Out := SAFEBOOL_Constant#SAFETRUE;
			S_MutingActive := SAFEBOOL_Constant#SAFETRUE;
			SafetyDemand := FALSE;
			ResetRequest := FALSE;
			Error := FALSE;
		SF_MutingPar_State#Muting_Backward_Active_2:
			DiscTimer11_12(IN := FALSE);
			DiscTimer21_22(IN := FALSE);
			Ready := TRUE;
			S_AOPD_Out := SAFEBOOL_Constant#SAFETRUE;
			S_MutingActive := SAFEBOOL_Constant#SAFETRUE;
			SafetyDemand := FALSE;
			ResetRequest := FALSE;
			Error := FALSE;
		SF_MutingPar_State#Muting_Forward_Active_1:
			DiscTimer11_12(IN := FALSE);
			DiscTimer21_22(IN := FALSE);
			IF(MutingEnable AND (R_Trig_S11.Q AND R_Trig_S12.Q AND NOT MutingSwitch21 AND NOT MutingSwitch22)) THEN
				MaxMutingTimer(IN := TRUE, PT:= MaxMutingTime);
			END_IF;
			Ready := TRUE;
			S_AOPD_Out := SAFEBOOL_Constant#SAFETRUE;
			S_MutingActive := SAFEBOOL_Constant#SAFETRUE;
			SafetyDemand := FALSE;
			ResetRequest := FALSE;
			Error := FALSE;
		SF_MutingPar_State#Muting_Forward_Step_1,
		SF_MutingPar_State#Muting_Forward_Step_2:
			DiscTimer11_12(IN := FALSE);
			DiscTimer21_22(IN := TRUE, PT := DiscTime21_22);
			Ready := TRUE;
			S_AOPD_Out := SAFEBOOL_Constant#SAFETRUE;
			S_MutingActive := SAFEBOOL_Constant#SAFETRUE;
			SafetyDemand := FALSE;
			ResetRequest := FALSE;
			Error := FALSE;
		SF_MutingPar_State#Muting_Forward_Active_2:
			DiscTimer11_12(IN := FALSE);
			DiscTimer21_22(IN := FALSE);
			Ready := TRUE;
			S_AOPD_Out := SAFEBOOL_Constant#SAFETRUE;
			S_MutingActive := SAFEBOOL_Constant#SAFETRUE;
			SafetyDemand := FALSE;
			ResetRequest := FALSE;
			Error := FALSE;
		ELSE
			ENO := FALSE;
	END_CASE;

	ENO := ENO AND CheckSAFEBOOL(S_AOPD_In) AND CheckSAFEBOOL(S_StartReset);

END_FUNCTION_BLOCK

FUNCTION MutingParGetErrorStateOfMutingSensors : UINT
	VAR_INPUT
		MS_11 : BOOL;
		MS_12 : BOOL;
		MS_21 : BOOL;
		MS_22 : BOOL;
	END_VAR

	VAR
		Result : UINT;
	END_VAR


	IF(MS_11) THEN
		Result := Result + 16#0010;
	END_IF;
	IF(MS_12) THEN
		Result := Result + 16#0020;
	END_IF;
	IF(MS_21) THEN
		Result := Result + 16#0040;
	END_IF;
	IF(MS_22) THEN
		Result := Result + 16#0080;
	END_IF;

	MutingParGetErrorStateOfMutingSensors := Result;

END_FUNCTION

END_NAMESPACE
END_NAMESPACE
